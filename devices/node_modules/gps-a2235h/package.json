{
  "name": "gps-a2235h",
  "version": "0.2.1",
  "description": "Library to run Tessel's GPS module.",
  "main": "index.js",
  "scripts": {
    "test": "tinytap -e 'tessel run {} ${GPS_PORT}' test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tessel/gps-a2235h.git"
  },
  "author": {
    "name": "Kelsey Breseman",
    "email": "kelsey@technical.io"
  },
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {
    "tinytap": "^0.2.0"
  },
  "readme": "#GPS\nDriver for the gps-a2235h Tessel GPS module. The hardware documentation for this module can be found [here](https://github.com/tessel/hardware/blob/master/modules-overview.md#gps).\n\nIf you run into any issues you can ask for support on the [GPS Module Forums](http://forums.tessel.io/category/gps).\n\nThe GPS module can currently only be run from Port C using software UART. Port C is the most isolated from RF noise and is best for locking onto GPS signals. \n\n###Installation\n```sh\nnpm install gps-a2235h\n```\n\n###Example\n```js\n/**********************************************************\nThis gps example logs a stream of data:\ncoordinates, detected satellites, timestamps, and altitude.\nFor best results, try it while outdoors.\n**********************************************************/\n\nvar tessel = require('tessel');\nvar gpsLib = require('gps-a2235h');\ngpsLib.debug = 0; // switch this to 1 for debug logs, 2 for printing out raw nmea messages\n\n// GPS uses software UART, which is only available on Port C\n// we use Port C because it is port most isolated from RF noise\nvar gps = gpsLib.use(tessel.port['C']); \n\n// Wait until the module is connected\ngps.on('ready', function () {\n  console.log('GPS module powered and ready. Waiting for satellites...');\n  // Emit coordinates when we get a coordinate fix\n  gps.on('coordinates', function (coords) {\n    console.log('Lat:', coords.lat, '\\tLon:', coords.lon, '\\tTimestamp:', coords.timestamp);\n  });\n\n  // Emit altitude when we get an altitude fix\n  gps.on('altitude', function (alt) {\n    console.log('Got an altitude of', alt.alt, 'meters (timestamp: ' + alt.timestamp + ')');\n  });\n\n  // Emitted when we have information about a fix on satellites\n  gps.on('fix', function (data) {\n    console.log(data.numSat, 'fixed.');\n  });\n\n  gps.on('dropped', function(){\n    // we dropped the gps signal\n    console.log(\"gps signal dropped\");\n  });\n});\n\ngps.on('error', function(err){\n  console.log(\"got this error\", err);\n});\n```\n\n###Methods\n&#x20;<a href=\"#api-gps-powerOff-callback-Turns-the-GPS-chip-off\" name=\"api-gps-powerOff-callback-Turns-the-GPS-chip-off\">#</a> gps<b>.powerOff</b>( callback() )  \n Turns the GPS chip off.  \n\n&#x20;<a href=\"#api-gps-powerOn-callback-Turns-the-GPS-chip-on\" name=\"api-gps-powerOn-callback-Turns-the-GPS-chip-on\">#</a> gps<b>.powerOn</b>( callback() )  \n Turns the GPS chip on.  \n\n\n###Events\n&#x20;<a href=\"#api-gps-on-altitude-callback-altitudeObj-Emitted-when-altitude-data-is-available-Emitted-in-the-form-altitude-in-meters-timestamp\" name=\"api-gps-on-altitude-callback-altitudeObj-Emitted-when-altitude-data-is-available-Emitted-in-the-form-altitude-in-meters-timestamp\">#</a> gps<b>.on</b>( 'altitude', callback(altitudeObj) )  \n Emitted when altitude data is available. Emitted in the form {altitude in meters, timestamp}.  \n\n&#x20;<a href=\"#api-gps-on-coordinates-callback-coordinateObj-Emitted-when-coordinate-data-is-available-Emitted-in-the-form-latitude-longitude-timestamp\" name=\"api-gps-on-coordinates-callback-coordinateObj-Emitted-when-coordinate-data-is-available-Emitted-in-the-form-latitude-longitude-timestamp\">#</a> gps<b>.on</b>( 'coordinates', callback(coordinateObj) )  \n Emitted when coordinate data is available. Emitted in the form {latitude, longitude, timestamp}.  \n\n&#x20;<a href=\"#api-gps-on-error-callback-err-Emitted-upon-error\" name=\"api-gps-on-error-callback-err-Emitted-upon-error\">#</a> gps<b>.on</b>( 'error', callback(err) )  \n Emitted upon error.  \n\n&#x20;<a href=\"#api-gps-on-power-off-callback-Emitted-when-the-module-has-been-powered-off\" name=\"api-gps-on-power-off-callback-Emitted-when-the-module-has-been-powered-off\">#</a> gps<b>.on</b>( 'power-off', callback() )  \n Emitted when the module has been powered off.  \n\n&#x20;<a href=\"#api-gps-on-power-on-callback-Emitted-when-the-module-has-been-powered-on\" name=\"api-gps-on-power-on-callback-Emitted-when-the-module-has-been-powered-on\">#</a> gps<b>.on</b>( 'power-on', callback() )  \n Emitted when the module has been powered on.  \n\n&#x20;<a href=\"#api-gps-on-ready-callback-Emitted-upon-first-successful-communication-between-the-Tessel-and-the-module\" name=\"api-gps-on-ready-callback-Emitted-upon-first-successful-communication-between-the-Tessel-and-the-module\">#</a> gps<b>.on</b>( 'ready', callback() )  \n Emitted upon first successful communication between the Tessel and the module.  \n\n\n###License\nMIT or Apache 2.0, at your option",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tessel/gps-a2235h/issues"
  },
  "homepage": "https://github.com/tessel/gps-a2235h",
  "_id": "gps-a2235h@0.2.1",
  "dist": {
    "shasum": "346ec7752aaeae2d96244041542c8c28394a4bf7"
  },
  "_from": "gps-a2235h@",
  "_resolved": "https://registry.npmjs.org/gps-a2235h/-/gps-a2235h-0.2.1.tgz"
}
